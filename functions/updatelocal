trap 'echo "Cleaning up..."; UL_cleanup; return 0' SIGINT

UL_cleanup(){
  if [[ -n $popit ]]; then cd - 2> /dev/null; fi
  if zplugin status desyncr/auto-ls &>/dev/null && ! $isdolphin && [[ -n $unloaded ]]; then
    zplugin load desyncr/auto-ls
  fi
  UPDATELOCAL_GITDIR=$cache

  unset -f UL_cleanup UL_usage UL_fetchupdates UL_checkupdates UL_git_current_branch UL_changelogs UL_recentcommits UL_connected
  unset cores cache hidden popit REMOTE unloaded lines
  trap - SIGINT
}

UL_usage(){
    cat <<- EOF
Usage: updatelocal [args]

Without arguments updatelocal will fetch all the directories located in \$UPDATELOCAL_GITDIR and highlight the repos with pending updates
Args:
  -r | --repull [basename] Completely reset supplied git directory basename and pull latest changes from remote repo, resets current directory if basename not supplied
  -p | --pwd               Set \$UPDATELOCAL_GITDIR to the current directory temporarily
  -c | --changes           Show a log of all repos with changes which have not been pulled yet

  -h | --help              Show this extremely helpful text
EOF
  UL_cleanup
}

UL_fetchupdates(){
  if [ -d .git ]; then
    echo "Fetching $(basename $PWD)..."
    git fetch -j $cores 2>&1
  fi
}

UL_checkupdates(){
  if [ -d .git ]; then
    local LOCAL REMOTE BASE gitname
    LOCAL=$(git rev-parse @ 2>/dev/null)
    REMOTE=$(git rev-parse "@{u}" 2>/dev/null)
    BASE=$(git merge-base @ "@{u}" 2>/dev/null)
    gitname=$(basename $PWD)

    if [ -z $BASE ] || [ -z $REMOTE ]; then
      echo -e "\e[00;31mCustom commit checked out $gitname\e[00m"
    elif [ $LOCAL = $REMOTE ]; then
      [ $hidden ] || echo "Up-to-date $gitname"
    elif [ $LOCAL = $BASE ]; then
      echo -e "\e[00;31mNeed to pull $gitname\e[00m"
    elif [ $REMOTE = $BASE ]; then
      [ $hidden ] || echo -e "\e[00;31mNeed to push $gitname\e[00m"
    else
      echo -e "\e[00;31mDiverged $gitname\e[00m"
    fi
  fi
}

UL_git_current_branch () {
        local ref
        ref=$(command git symbolic-ref --quiet HEAD 2> /dev/null)
        local ret=$?
        if [[ $ret != 0 ]]
        then
                [[ $ret == 128 ]] && return
                ref=$(command git rev-parse --short HEAD 2> /dev/null)  || return
        fi
        echo ${ref#refs/heads/}
}

UL_changelogs(){
  if [ -d .git ]; then
    local currentbranch tracked_remote changes
    currentbranch=$(UL_git_current_branch)
    tracked_remote=$(git config "branch.$currentbranch.remote")
    if [ -z "$currentbranch" ] || [ -z "$(git rev-parse "@{u}" 2>/dev/null)" ] ; then return; fi
    changes=$(git log "$currentbranch".."$tracked_remote"/"$currentbranch")

    if [ $changes ]; then echo "BEGIN====================================================\\"
    echo "$PWD"; fi
    git log --color=always --graph --pretty='''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset''' --stat "$currentbranch".."$tracked_remote"/"$currentbranch"
    if [ $changes ]; then echo "$PWD"; echo "======================================================END/"
    echo; fi
  fi
}

# Borrowed from zplugin
UL_recentcommits(){
  setopt localoptions extendedglob nokshglob noksharrays noshwordsplit
  local nl=$'\n' escape=$'\x1b['

  lines=( ${(f)"$(command git log --color --date=short --pretty=format:'%Cgreen%cd %h %Creset%s %Cred%d%Creset || %b' ..FETCH_HEAD)"} )
  if (( ${#lines} > 0 )); then
    # Remove the (origin/master ...) segments, to expect only tags to appear
    lines=( "${(S)lines[@]//\(([,[:blank:]]#(origin|HEAD|master)[^a-zA-Z]##(HEAD|origin|master)[,[:blank:]]#)#\)/}" )
    # Remove " ||" if it ends the line (i.e. no additional text from the body)
    lines=( "${lines[@]/ \|\|[[:blank:]]#(#e)/}" )
    # If there's no ref-name, 2 consecutive spaces occur - fix this
    lines=( "${lines[@]/(#b)[[:space:]]#\|\|[[:space:]]#(*)(#e)/|| ${match[1]}}" )
    lines=( "${lines[@]/(#b)$escape([0-9]##)m[[:space:]]##${escape}m/$escape${match[1]}m${escape}m}" )
    # Replace what follows "|| ..." with the same thing but with no newlines,
    # and also only first 10 words (the (w)-flag enables word-indexing)
    lines=( "${lines[@]/(#b)[[:blank:]]#\|\|(*)(#e)/| ${${match[1]//$nl/ }[(w)1,(w)10]}}" )
  fi
  builtin print -rl -- "${lines[@]}" | command less -FRXi
}

UL_connected(){
  ping -q -w 1 -c 1 $(ip r | grep default | cut -d ' ' -f 3) &> /dev/null && return 0 || { echo "You're not connected to the internet"; return 1; }
}

#support for disabling auto-ls when terminal is not dolphin, already disabled otherwise
[[ -n "$isdolphin" ]] && { $isdolphin || { zplugin unload -q desyncr/auto-ls &>/dev/null && unloaded=true; } }
UPDATELOCAL_GITDIR=$(realpath $UPDATELOCAL_GITDIR)
cache=$UPDATELOCAL_GITDIR
if [[ $UPDATELOCAL_GITDIR != "$PWD" ]]; then popit="set"; fi
if [[ $1 = "-p" || $1 = "--pwd" ]]; then
  unset popit
  UPDATELOCAL_GITDIR=$PWD
  shift
fi

cores=$(nproc)

if [[ $1 != "-r" && $1 != "--repull" && $1 != "-h" && $1 != "--help" ]]; then
    if [[ -z $UPDATELOCAL_GITDIR ]]; then
        echo "\$UPDATELOCAl_GITDIR is unset, set this variable before running"
        unset popit
        UL_cleanup
        return 1
    elif cd $UPDATELOCAL_GITDIR; then
        ls --color=auto
        echo
    else
        echo "Error cd-ing into '$UPDATELOCAL_GITDIR', is it a real directory? Make sure to set \$UPDATELOCAL_GITDIR"
        unset popit
        UL_cleanup
        return 1
    fi
fi

case $1 in
  --changes | -c )
    hidden=true
    { for d in ./*/ ; do (builtin cd "$d" && UL_checkupdates); done
    echo
    for d in ./*/ ; do (builtin cd "$d" && UL_changelogs); done } | less -R
    ;;
  --repull | -r )
    [[ $UPDATELOCAL_GITDIR/$2 != $UPDATELOCAL_GITDIR/ ]] && cd $UPDATELOCAL_GITDIR/$2 && popit="set" || { echo "Assuming --pwd"; unset popit }
    
    REMOTE=$(git rev-parse "@{u}")
    if [[ -z $REMOTE ]]; then echo "Unable to repull"; UL_cleanup; return 1; fi
    
    UL_recentcommits
    echo "Are you sure you want to repull $PWD? [y/n]"
    read key
    if [ "$key" = "y" ] && UL_connected; then
      git reset --hard
      git clean -fdx
      git pull -j $cores
      echo
    fi
    ;;
--help | -h )
    unset popit
    UL_usage
    return
    ;;
  * )
    echo "Fetching latest updates..."
    UL_connected && (for d in ./*/ ; do (builtin cd "$d" && UL_fetchupdates) & done | GREP_COLORS='ms=1;34' grep -E --color '.*From.*|$'; wait)
    echo
    for d in ./*/ ; do (builtin cd "$d" && UL_checkupdates); done
    echo
    ;;
esac


UL_cleanup
